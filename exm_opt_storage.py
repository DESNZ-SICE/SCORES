# Get the week's forecasts for solar and demand, formatted as 7 x array(size=48) each!import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport optimise_configuration as opt_conimport storage as storimport aggregatedEVs as aggEVimport aggregatedEVs as aggEVsdf = pd.read_excel (r'/Users/cormacomalley/Documents/BEIS_Work/SCORES-master/plugin_sched.xlsx') #place "r" before the path string to address special character, such as '\'. Don't forget to put the file name at the end of the path + '.xlsx'timeseries = df.to_numpy() # 0)24hr time 1) Nout 2) Nin 3) surplus (GW) (for now, in future will take surplus as a model input)#Nin/out are normalised proportions of Nofrom generation import (OffshoreWindModel, SolarModel, OnshoreWindModel3600,                        OnshoreWindModel2000, OnshoreWindModel4200,                        OnshoreWindModel5300, OnshoreWindModel5800)'''        == Define Surplus =='''w = OnshoreWindModel3600(year_min=2013, year_max=2014, sites='all',                         data_path='data/wind/')# = SolarModel(year_min=2013, year_max=2014, sites='all',#               data_path='data/solar/')wind_cap = 400sol_cap = 100power = wind_cap * np.asarray(w.power_out)demand = 60 * np.ones([power.size])surplus = power - demand#print(int(sum(surplus)/1000))'''        == Define Battery Types =='''MultStors = stor.MultipleStorageAssets([stor.BatteryStorageModel(capacity=1),stor.HydrogenStorageModel(capacity=10)])#Dom = aggEV.Domestic_Fleet()start = 5000end = 7000#print(timeseries[0:50,3])MultStors.optimise_storage(surplus,sum(demand)*0.01)MultStors.assets[0].plot_timeseries(start,end)MultStors.assets[1].plot_timeseries(start,end)MultStors.plot_timeseries(start,end)#NB, for 3.5 years it takes 41sprint('For the Battery, installed:',int(MultStors.assets[0].capacity), 'MWh, energy in: ', int(MultStors.assets[0].en_in)/1000, ' GWh, energy out: ', -int(MultStors.assets[0].en_out)/1000, 'GWh.')print('For the Hydrogen, installed:',int(MultStors.assets[1].capacity), 'MWh, energy in: ', int(MultStors.assets[1].en_in)/1000, ' GWh, energy out: ', -int(MultStors.assets[1].en_out)/1000, 'GWh.' )