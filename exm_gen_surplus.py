#created to test generation profiles Macfrom generation import (OffshoreWindModel, SolarModel, OnshoreWindModel3600,                        OnshoreWindModel2000, OnshoreWindModel4200,                        OnshoreWindModel5300, OnshoreWindModel5800)from system import ElectricitySystem, ElectricitySystemGBimport numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport aggregatedEVs as aggEVimport storage as stor'''        == Define Surplus =='''w = OnshoreWindModel5800(sites=[17],year_min=2013, year_max=2014,                         data_path='data/wind/')# = SolarModel(year_min=2013, year_max=2014, sites='all',#               data_path='data/solar/')wind_cap = 400sol_cap = 100power = wind_cap * np.asarray(w.power_out)df = pd.read_excel (r'/Users/cormacomalley/Documents/BEIS_Work/SCORES-master/data/2013Demand.xlsx') #place "r" before the path string to address special character, such as '\'. Don't forget to put the file name at the end of the path + '.xlsx'demand = df.to_numpy() # 0)24hr time 1) Nout 2) Nin 3) surplus (GW)demand = demand[:,2]/50surplus = power[0:8760] - demand'''        == Optimise EV Setup =='''Dom1 = aggEV.AggregatedEVModel(eff_in=95, eff_out=95, chargertype=np.zeros([3]), chargercost=np.array([4000/25,200/25,50/25]), max_c_rate=10, max_d_rate=10, min_SOC=0, max_SOC=40, number=300000,initial_number = 0.9, Ein = 20, Eout = 36, Nin = np.array([0,0,0,0,0,0,0,0,0,0.1,0,0,0,0,0,0.1,0.1,0.1,0.1,0,0,0,0,0]),Nout = np.array([0,0,0,0,0,0,0,0.2,0.2,0,0,0,0,0,0,0.1,0,0,0,0,0,0,0,0]),name = 'Domestic1')MultsFleets = aggEV.MultipleAggregatedEVs([Dom1])MultStors = stor.MultipleStorageAssets([stor.BatteryStorageModel(capacity=1),stor.HydrogenStorageModel(capacity=10)])MultsFleets.optimise_charger_type(surplus,sum(demand)*0.02,MultStors)start = 1000end = 1150print(int(MultsFleets.assets[0].number * MultsFleets.assets[0].chargertype[0]),' V2G Chargers, ', int(MultsFleets.assets[0].number * MultsFleets.assets[0].chargertype[1]), ' Smart Chargers.' )print('For the Battery, installed:',int(MultStors.assets[0].capacity), 'MWh, energy in: ', int(MultStors.assets[0].en_in)/1000, ' GWh, energy out: ', -int(MultStors.assets[0].en_out)/1000, 'GWh.')print('For the Hydrogen, installed:',int(MultStors.assets[1].capacity), 'MWh, energy in: ', int(MultStors.assets[1].en_in)/1000, ' GWh, energy out: ', -int(MultStors.assets[1].en_out)/1000, 'GWh.' )MultStors.assets[0].plot_timeseries(start,end)MultStors.assets[1].plot_timeseries(start,end)MultsFleets.assets[0].plot_timeseries(start,end)MultsFleets.plot_timeseries(start,end)MultsFleets.plot_timeseries(0,1000)