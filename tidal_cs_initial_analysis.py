import timefrom generation import (OffshoreWindModel, SolarModel, OnshoreWindModel5800,TidalStreamTurbineModelFast,TidalStreamTurbineModelFastFirm,TidalStreamTurbineModel, TidalStreamTurbineModelSlow,TidalStreamTurbineModelSlowFirm)from storage import (BatteryStorageModel, HydrogenStorageModel,                      MultipleStorageAssets)from system import ElectricitySystem, ElectricitySystemGBimport csvimport numpy as npimport matplotlib.pyplot as pltimport aggregatedEVs as aggEV'''Initialise generators'''ymin = 2016ymax = 2016st=int(3500)en = int(4172)osw_master = OffshoreWindModel(year_min=ymin, year_max=ymax, sites=[119,174,178,209,364],                        data_path='data/150m/')# Note that the solar model is substantially slower than the wind modelss = SolarModel(year_min=ymin, year_max=ymax, sites=[17,23,24],                        data_path='data/solar/')## Generic ## #Pentland Firthts_p = TidalStreamTurbineModel(year_min=ymin, year_max=ymax, sites=[1126],                data_path='data/tidal/Pentland/')ts_p.fixed_cost=1#Angleseyts_a = TidalStreamTurbineModel(year_min=ymin, year_max=ymax, sites=[173],                data_path='data/tidal/Anglesey/')ts_a.fixed_cost=1#Solentts_s = TidalStreamTurbineModel(year_min=ymin, year_max=ymax, sites=[2046],                data_path='data/tidal/Solent/')ts_s.fixed_cost=1print('Anglesey: LF: ', ts_a.get_load_factor(),', Total PWR: ', sum(ts_a.power_out),'MWh.')print('Solent: ', ts_s.get_load_factor(),', Total PWR: ', sum(ts_s.power_out),'MWh.')print('Pentland: ', ts_p.get_load_factor(),', Total PWR: ', sum(ts_p.power_out),'MWh.')Generic_Stor = np.zeros([10,3]) #where the Stored amounts of built capacity goes, pentland, anglesey, isle of whiteYield_Stor = np.zeros([10,3])Firm_Stor = np.zeros([10,3])'''Initialise storage''''''System optimisation'''# Initialise list of storage# for x in range(1,11):    #         #Pentland Firth#     ts_p = TidalStreamTurbineModel(year_min=ymin, year_max=ymax, sites=[1126],#                    data_path='data/tidal/Pentland/')#     ts_p.fixed_cost=10.49    #     #Anglesey#     ts_a = TidalStreamTurbineModel(year_min=ymin, year_max=ymax, sites=[173],#                    data_path='data/tidal/Anglesey/')#     ts_a.fixed_cost=12.55#     #Solent#     ts_s = TidalStreamTurbineModel(year_min=ymin, year_max=ymax, sites=[2046],#                    data_path='data/tidal/Solent/')#     ts_s.fixed_cost=11.38#     generators = [osw_master]    #     B = BatteryStorageModel()#     B.limits = [0,x*10]#     B.fixed_cost = 0.1#     storage = [B]#     # Initialise electricity sytem with existing GB demand#     es = ElectricitySystemGB(generators, storage, year_min = ymin, year_max = ymax,#                               reliability = 99, strategy='ordered', start_up_time=24)    #     es.demand = np.ones(len(es.demand))*10#     es.fully_optimise(sum(es.demand)*0.001,fixed_capacities=False)#     Generic_Stor[x-1,0] = es.gen_list[0].total_installed_capacity#es.new_analyse(filename='log/Generic.txt')# timehorizon = en-st# plt.rc('font', size=12)# fig, ax = plt.subplots(figsize=(10, 6))# colours = ['b','g','r','c','m','y','b','g','r','c','m','y']# name = ['Pentland', 'Anglesey', 'IO White']# for g in range(len(es.gen_list)):                #     ax.plot(range(st,en), es.gen_list[g].power_out[st:en], color=colours[g], label = name[g])# #ax.plot(range(st,en), es.demand[st:en], color='tab:orange', label='Demand')# # Same as above# ax.set_xlabel('Time (h)')# ax.set_ylabel('Power (MW)')# ax.set_title(' 1 Month Generic')# ax.grid(True)# ax.legend(loc='upper left'); # st1 = 3976# en1 = 4000# timehorizon = en1-st1# plt.rc('font', size=12)# fig, ax = plt.subplots(figsize=(10, 6))# colours = ['b','g','r','c','m','y','b','g','r','c','m','y']# name = ['Pentland', 'Anglesey', 'IO White']# for g in range(len(es.gen_list)):                #     ax.plot(range(st1,en1), es.gen_list[g].power_out[st1:en1], color=colours[g], label = name[g])# #ax.plot(range(st,en), es.demand[st:en], color='tab:orange', label='Demand')# # Same as above# ax.set_xlabel('Time (h)')# ax.set_ylabel('Power (MW)')# ax.set_title(' 1 Day Generic')# ax.set_ylim(0, 0.6)# ax.grid(True)# ax.legend(loc='upper left'); # count = 0# for i in range(len(es.gen_list[g].power_out)):#     x = es.gen_list[0].power_out[i] + es.gen_list[1].power_out[i] +es.gen_list[2].power_out[i]#     if x==0: #         count = count +1# print('Zero Gen Hours Generic: ', count)##########  Maximum Yield ########Pentland Firthts_p = TidalStreamTurbineModelFast(year_min=ymin, year_max=ymax, sites=[1126],               data_path='data/tidal/Pentland/')ts_p.fixed_cost=1#Angleseyts_a = TidalStreamTurbineModelSlow(year_min=ymin, year_max=ymax, sites=[173],               data_path='data/tidal/Anglesey/')ts_a.fixed_cost=1#Solentts_s = TidalStreamTurbineModelSlow(year_min=ymin, year_max=ymax, sites=[2046],               data_path='data/tidal/Solent/')ts_s.fixed_cost=1generators = [ts_p,ts_a,ts_s]B = BatteryStorageModel()storage = []# Initialise electricity sytem with existing GB demandes = ElectricitySystemGB(generators, storage, year_min = ymin, year_max = ymax,                          reliability = 99, strategy='ordered', start_up_time=24)es.demand = np.ones(len(es.demand))*10timehorizon = en-stplt.rc('font', size=12)fig, ax = plt.subplots(figsize=(10, 6))colours = ['b','g','r','c','m','y','b','g','r','c','m','y']name = ['Pentland', 'Anglesey', 'IO White']for g in range(len(es.gen_list)):                    ax.plot(range(st,en), es.gen_list[g].power_out[st:en], color=colours[g], label = name[g])#ax.plot(range(st,en), es.demand[st:en], color='tab:orange', label='Demand')# Same as aboveax.set_xlabel('Time (h)')ax.set_ylabel('Power (MW)')ax.set_title(' 1 Month Yield')ax.grid(True)ax.legend(loc='upper left'); count = 0# for i in range(len(es.gen_list[g].power_out)):#     x = es.gen_list[0].power_out[i] + es.gen_list[1].power_out[i] +es.gen_list[2].power_out[i]#     if x==0: #         count = count +1#         st1 = i-12#         en1 = i+12#         timehorizon = en1-st1#         plt.rc('font', size=12)#         fig, ax = plt.subplots(figsize=(10, 6))#         colours = ['b','g','r','c','m','y','b','g','r','c','m','y']#         name = ['Pentland', 'Anglesey', 'IO White']#         for g in range(len(es.gen_list)):                #             ax.plot(range(st1,en1), es.gen_list[g].power_out[st1:en1], color=colours[g], label = name[g])print('Zero Gen Hours Yield: ', count)        st1 = 6070en1 = 6094timehorizon = en1-st1plt.rc('font', size=12)fig, ax = plt.subplots(figsize=(10, 6))colours = ['b','g','r','c','m','y','b','g','r','c','m','y']name = ['Pentland', 'Anglesey', 'IO White']for g in range(len(es.gen_list)):                    ax.plot(range(st1,en1), es.gen_list[g].power_out[st1:en1], color=colours[g], label = name[g])#ax.plot(range(st,en), es.demand[st:en], color='tab:orange', label='Demand')# Same as aboveax.set_xlabel('Time (h)')ax.set_ylabel('Power (MW)')ax.set_title(' 1 Day Yield')ax.grid(True)ax.legend(loc='upper left');       #es.fully_optimise(sum(es.demand)*0.001,fixed_capacities=False)#es.new_analyse(filename='log/Yield.txt')#es.plot_timeseries(start=st,end=en)                   ######### Firm   ###########Pentland Firthts_p = TidalStreamTurbineModelFastFirm(year_min=ymin, year_max=ymax, sites=[1126],               data_path='data/tidal/Pentland/')ts_p.fixed_cost=1#Angleseyts_a = TidalStreamTurbineModelSlowFirm(year_min=ymin, year_max=ymax, sites=[173],               data_path='data/tidal/Anglesey/')ts_a.fixed_cost=1#Solentts_s = TidalStreamTurbineModelSlowFirm(year_min=ymin, year_max=ymax, sites=[2046],               data_path='data/tidal/Solent/')ts_s.fixed_cost=1generators = [ts_p,ts_a,ts_s]# Initialise electricity sytem with existing GB demandes = ElectricitySystemGB(generators, storage, year_min = ymin, year_max = ymax,                          reliability = 99, strategy='ordered', start_up_time=24)es.demand = np.ones(len(es.demand))*10timehorizon = en-stplt.rc('font', size=12)fig, ax = plt.subplots(figsize=(10, 6))colours = ['b','g','r','c','m','y','b','g','r','c','m','y']name = ['Pentland', 'Anglesey', 'IO White']for g in range(len(es.gen_list)):                    ax.plot(range(st,en), es.gen_list[g].power_out[st:en], color=colours[g], label = name[g])#ax.plot(range(st,en), es.demand[st:en], color='tab:orange', label='Demand')# Same as aboveax.set_xlabel('Time (h)')ax.set_ylabel('Power (MW)')ax.set_title(' 1 Month Firm')ax.grid(True)ax.legend(loc='upper left'); #can use this to search for zero summative timescount = 0for i in range(len(es.gen_list[g].power_out)):    x = es.gen_list[0].power_out[i] + es.gen_list[1].power_out[i] +es.gen_list[2].power_out[i]    if x==0:         count = count +1print('Zero Gen Hours Firm: ', count)#st1 = 766#en1 = 790timehorizon = en1-st1plt.rc('font', size=12)fig, ax = plt.subplots(figsize=(10, 6))colours = ['b','g','r','c','m','y','b','g','r','c','m','y']name = ['Pentland', 'Anglesey', 'IO White']for g in range(len(es.gen_list)):                    ax.plot(range(st1,en1), es.gen_list[g].power_out[st1:en1], color=colours[g], label = name[g])#ax.plot(range(st,en), es.demand[st:en], color='tab:orange', label='Demand')# Same as aboveax.set_xlabel('Time (h)')ax.set_ylabel('Power (MW)')ax.set_title(' 1 Day Firm')ax.grid(True)ax.legend(loc='upper left'); # es.fully_optimise(sum(es.demand)*0.001,fixed_capacities=False)# es.new_analyse(filename='log/Firm.txt')# es.plot_timeseries(start=st,end=en)   